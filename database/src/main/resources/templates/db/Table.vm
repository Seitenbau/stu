#set($names          = ${model.dataSet.names})
#set($filename       = ${names.getTableClass($model)})
#set($package        = ${model.package} )
#set($clsRowbuilder  = ${names.getRowBuilderClass($model)})
#set($clsRowsetters  = ${names.getRowSettersClass($model)})
#set($clsRowgetters  = ${names.getRowGettersClass($model)})
#set($findWhereClass = ${names.getFindWhereClass($model)})
#set($getWhereClass  = ${names.getGetWhereClass($model)})
#set($rowmodify      = ${names.getRowModifyClass($model)})
#set($rowcollection  = ${names.getRowCollectionClass($model)})
#set($clsTable       = ${names.getTableClass($model)} )
#set($clsDataSet     = ${names.dataSetClass} )
#set($clsRef         = ${names.getRefClass($model)})
#set($jd             = ${model.dataSet.javaDocBuilder})
#set($jdSep          = "#")
#parse("templates/db/include_javadoc.vm")
#if( $package && $package.length() != 0 )
package ${package};
#end

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Iterator;
import java.util.Map;
import java.util.HashMap;

import org.dbunit.dataset.ITable;
import org.dbunit.dataset.Column;
import org.dbunit.dataset.ITableMetaData;
import org.dbunit.dataset.DefaultTableMetaData;
import org.dbunit.dataset.RowOutOfBoundsException;
import org.dbunit.dataset.DataSetException;
import org.dbunit.dataset.datatype.DataType;

import com.google.common.base.Optional;
#if( ${model.hasDataColumns()} )
import com.seitenbau.stu.database.dsl.CastUtil;
#end
import com.seitenbau.stu.database.dsl.DataSetIdentificator;
import com.seitenbau.stu.database.dsl.DataSetRegistry;
import com.seitenbau.stu.database.dsl.DatabaseRef;
#foreach( $column in $model.columns )
#if( ${column.isNextValueMethodGenerated()} )
import com.seitenbau.stu.database.extend.DatasetIdGenerator;
#break
#end
#end
import com.seitenbau.stu.database.generator.ColumnMetaData;
import com.seitenbau.stu.database.generator.ColumnMetaDataBuilder;
#foreach( $column in $model.columns )
#if( ${column.isImmutable()})
import com.seitenbau.stu.database.util.NullCompatibleEquivalence;
#break
#end
#end
import com.seitenbau.stu.util.Action;
import com.seitenbau.stu.util.Filter;
import com.seitenbau.stu.util.Future;
import com.seitenbau.stu.util.DateUtil;
import com.seitenbau.stu.util.date.DateBuilder;

#foreach( $table in $model.requiredTableImports )
#set($importGetter = ${names.getRowGettersClass($table)})
#set($importTable = ${names.getTableClass($table)})
import ${model.package}.${importTable}.${importGetter};
#end

/* *******************************************************
  Generated via : codegeneration.GenerateDatabaseClasses
**********************************************************/
#set( $adapter = ${names.getTableAdapterClass($model)} )

#javadoc_table($model)
public class ${clsTable} implements ITable
{
  public final static String NAME = "${model.name}";

  public static class Columns
  {
#foreach( $column in $model.columns )
    public static final String ${column.javaName} = "${column.name}";
#end
  }

  // @formatter:off
  public final static Column[] COLUMNS = new Column[] {
#foreach( $column in $model.columns )
    // idx = ${foreach.index}
#if( ${column.autoIncrement} )
    new Column(Columns.${column.javaName}, ${column.type}, ${column.type}.toString(), Column.NULLABLE_UNKNOWN, null, null, Column.AutoIncrement.YES)#else
    new Column(Columns.${column.javaName}, ${column.type})#end#if(!$foreach.isLast()),#end

#end
  };

  private static final Map<String, ColumnMetaData> GENERATOR_METADATA;
  
  public static ColumnMetaData getColumnMetaData(String column)
  {
    if (!GENERATOR_METADATA.containsKey(column)) 
    {
      throw new RuntimeException("Column " + column + " does not exist, no meta data available.");
    }
    
    return GENERATOR_METADATA.get(column);
  }
  
  static {
    GENERATOR_METADATA = new HashMap<String, ColumnMetaData>();
#foreach( $column in $model.columns )

    ColumnMetaDataBuilder builder${column.javaName} = new ColumnMetaDataBuilder();
#foreach ( $flag in ${column.metaData.flags})
#if( ${column.metaData.hasFlag($flag)} )
    builder${column.javaName}.setFlag("$flag");
#end
#end
    GENERATOR_METADATA.put(Columns.${column.javaName}, builder${column.javaName}.build());
#end
  }
  // @formatter:on

  ITableMetaData _metaData;
  
  ${clsDataSet} _dataSet;
  
  Iterator<${clsRowbuilder}> _iterator;
  
  public ${clsTable}()
  {
    _metaData = new DefaultTableMetaData(NAME, COLUMNS);
  }

  public void setDataset(${clsDataSet} dataSet)
  {
    _dataSet = dataSet;
  }
  
  public ${clsDataSet} getDataset()
  {
    return _dataSet;
  }

  public List<${clsRowbuilder}> rows = new ArrayList<${clsRowbuilder}>();
  
  @SuppressWarnings("rawtypes")
  public interface ${clsRowsetters}<T extends ${clsRowsetters}>
  {
#foreach( $column in $model.columns )
#if( $column.javaType.contains("Date") )
    T set${column.javaName}(String dateString);
    T set${column.javaName}(DateBuilder date);
#end
#if( $column.javaType.contains("Long") )
    T set${column.javaName}(Integer intValue);
#end
#if( $column.relation )
    T set${column.javaName}(${names.getRefClass($column.relation.foreignColumn.table)} reference);
#end
#if( ${column.isFutureValueSupported()} )
    T set${column.javaName}(Future<Object> value);
#end
    T set${column.javaName}(${column.javaType} value);
    T set${column.javaName}Raw(Object value);
#if( ${column.isNextValueMethodGenerated()} )
    T next${column.javaName}();
#end
#end 
  }

  @SuppressWarnings("rawtypes")
  public interface ${clsRowgetters}<T extends ${clsRowgetters}>
  {
#foreach( $column in $model.columns )
#if( ${column.description} )

    /**
     * ${column.description}
     * @return The value
     */
#end
    ${column.javaType} get${column.javaName}();
#end 

  }

  public static class ${clsRowbuilder} implements
    ${clsRowsetters}<${clsRowbuilder}>, ${clsRowgetters}<${clsRowbuilder}>
  {

    Object[] data;
    
    Boolean[] mutable;
        
    ${clsTable} table;
    
    ${clsRef} ref;
    
    ${clsRowbuilder}(${clsTable} tableDelegate) 
    {
      data = new Object[COLUMNS.length];
      mutable = new Boolean[COLUMNS.length];
      for (int i = 0; i < COLUMNS.length; i++)
      {
        mutable[i] = true;
      }
      table = tableDelegate;
    }

    /**
     * Binds the row with the reference in this scope
     * @param ref The reference, which shall be bound to the row builder
     * @return The row builder
     */
    public ${clsRowbuilder} bind(${clsRef} ref)
    {
      this.ref = ref;
      ref.setBuilder(table._dataSet, this);
      return this;
    }
    
    public ${clsRef} getRef()
    {
      return ref;
    }

    void assertNoRefType(String columnName, Object value)
    {
      if (value instanceof DatabaseRef)
      {
        throw new RuntimeException("Column " + columnName + " can not contain a Ref type (class: " + value.getClass().getName() + ")");
      }
    }
    
    void assertNoOrCorrectRefType(String columnName, Class<?> clazz, Object value)
    {
      if (value instanceof DatabaseRef)
      {
        if (!clazz.isInstance(value)) {
          throw new RuntimeException("Column " + columnName + " id can not contain the Ref type (class: " + value.getClass().getName() + ")");
        }
      }
    }
#foreach( $column in $model.columns )
#if( $column.javaType.contains("Date") )

    public ${clsRowbuilder} set${column.javaName}(String dateString)
    {
      return set${column.javaName}Raw(toDate(dateString));
    }

    public ${clsRowbuilder} set${column.javaName}(DateBuilder date)
    {
      return set${column.javaName}Raw(toDate(date));
    }
#end
#if( $column.javaType.contains("Long") )

    public ${clsRowbuilder} set${column.javaName}(Integer intValue)
    {
      return set${column.javaName}Raw(intValue == null ? null : Long.valueOf(intValue));
    }
#end
#if( ${column.isFutureValueSupported()} )

    public ${clsRowbuilder} set${column.javaName}(Future<Object> value)
    {
      return set${column.javaName}Raw(value);
    }
#end

    public ${clsRowbuilder} set${column.javaName}(${column.javaType} value)
    {
      return set${column.javaName}Raw(value);
    }
#if( $column.relation )

    public ${clsRowbuilder} set${column.javaName}(${names.getRefClass($column.relation.foreignColumn.table)} reference)
    {
      return set${column.javaName}Raw(reference);
    }
#end
    
    public ${clsRowbuilder} set${column.javaName}Raw(Object value)
    {
#if( ${column.relation} )
      assertNoOrCorrectRefType("${column.javaName}", ${names.getRefClass($column.relation.foreignColumn.table)}.class, value);
#else
      assertNoRefType("${column.javaName}", value);
#end
#if( ${column.isImmutable()})
      if (!mutable[${foreach.index}] && NullCompatibleEquivalence.equals(data[${foreach.index}], value))
      {
        throw new RuntimeException("Value ${column.name} is immutable an cannot be changed (new value: " + value + ", old value: " + data[${foreach.index}] + ").");
      }
      mutable[${foreach.index}] = false;
#end
      data[${foreach.index}] = value;
      return this;
    }
#if( ${column.isNextValueMethodGenerated()} )

    public ${clsRowbuilder} next${column.javaName}()
    {
      DatasetIdGenerator generator = table.getDataset().getIdGenerator();
      Long nextId = generator.nextId(${clsTable}.NAME,"$column.name");
      set${column.javaName}(nextId);
      return this;
    }

    private void autoInvokeNext${column.javaName}()
    {
      next${column.javaName}();
      // when auto invoked, the value can be overwritten manually
      mutable[${foreach.index}] = true;
    }
#end

#if( ${column.description} )
    /**
     * ${column.description}
     * @return The value
     */
#else
    // use description() in the table model to add a column description
#end
    public ${column.javaType} get${column.javaName}()
    {
      Object value = data[$foreach.index];
#if( ${column.isFutureValueSupported()} )
      if (value instanceof Future<?>)
      {
        DataSetIdentificator last = DataSetRegistry.use(table._dataSet);
        @SuppressWarnings("unchecked")
        Future<Object> futureValue = (Future<Object>)value;
        ${column.javaType} result = (${column.javaType})CastUtil.cast(futureValue.getFuture(), 
          com.seitenbau.stu.database.generator.${column.type});
        DataSetRegistry.use(last);
        return result;
      }
#end
#if( (${column.relation}) )
#set($refTable = $column.relation.foreignColumn.table)
      if (value instanceof ${names.getRefClass($refTable)})
      {
        ${names.getRefClass($refTable)} ref = (${names.getRefClass($refTable)})value;
        return ref.getBuilder(table._dataSet).get${column.relation.foreignColumn.javaName}();
      }      
#end
      return (${column.javaType})value;
    }

#if( ${column.description} )
    /**
     * ${column.description}
     * @return The value as raw object
     */
#else
    // use description() in the table model to add a column description
#end
    public Object get${column.javaName}Raw()
    {
      return data[$foreach.index];
    }
#end 

    /**
     * Insert a new Row at the end of the Table
     * <code><pre>
     * ds.${names.getTableVariable($model)}.insertRow()
     *   .bind( ${jd.getSampleRef($model)} )
#foreach( $column in $model.columns )
     *   .set${column.javaName}( null )
#end
     *   ;
     * </pre></code>
     */
    public ${clsRowbuilder} insertRow()
    {
      return table.insertRow();
    }
#if( ${model.dataSet.isModelClassGeneration()} )

    /**
     * Insert a new Row at the end of the Table
     * <code><pre>
     * ds.${names.getTableVariable($model)}.insertRow()
     *   .bind( ${jd.getSampleRef($model)} )
#foreach( $column in $model.columns )
     *   .set${column.javaName}( null )
#end
     *   ;
     * </pre></code>
     */
    public ${clsRowbuilder} insertRow(${model.javaName}Model row)
    {
      return table.insertRow(row);
    }
#end

    /**
     * Insert a new Row at the given position
     * <code><pre>
     * ds.${names.getTableVariable($model)}.this.insertRowAt(2)
     *   .bind( ${jd.getSampleRef($model)} )
#foreach( $column in $model.columns )
     *   .set${column.javaName}( null )
#end
     *   ;
     * </pre></code>
     */
    public ${clsRowbuilder} insertRowAt(int index)
    {
      return table.insertRowAt(index);
    }

    /**
     * Insert a row at the end of the table
     * <code><pre>
     * ds.${names.getTableVariable($model)}.insertRow(someRow);
     * </pre></code>
     */
    public ${clsRowbuilder} insertRow(${clsRowbuilder} theRow)
    {
      return table.insertRow(theRow);
    }
    
    /**
     * Gets the value of a specified column.
     * <p>
     * Throws a RuntimeException, if row count is not equal to 1.
     * @param column The column name (not case sensitive)
     * @return The value
     */
    public Object getValue(String column) throws RuntimeException 
    {
#foreach( $column in $model.columns )
      if(column.equalsIgnoreCase(Columns.${column.javaName}) )
      {
#if( ${column.relation} )
#set($refTableClass = ${names.getRefClass($column.relation.foreignColumn.table)})
        Object value = data[$foreach.index];
        if (value instanceof ${refTableClass})
        {
          ${refTableClass} ref = (${refTableClass})value;
          ${column.javaType} refValue = ref.getBuilder(table._dataSet).get${column.relation.foreignColumn.javaName}();
          return refValue; 
        }      
        return value;
#else
        return getColumnValue($foreach.index);
#end
      }
#end
      throw new RuntimeException(NAME + " col = " + column);
    }
    
    // considered private, but possibly unused
    Object getColumnValue(int index)
    {
      Object value = data[index];
      if (value instanceof Future<?>)
      {
        DataSetIdentificator last = DataSetRegistry.use(table._dataSet);
        @SuppressWarnings("unchecked")
        Future<Object> futureValue = (Future<Object>)value;
        Object result = futureValue.getFuture();
        DataSetRegistry.use(last);
        return result;
      } 
      return value;
    }
#foreach( $column in $model.columns )
#if( $column.relation )
#set($otherGetter = ${names.getRowGettersClass(${column.relation.foreignColumn.table})} )

    public ${clsRowbuilder} ref${column.javaName}(@SuppressWarnings("rawtypes") $otherGetter reference)
    {
      set${column.javaName}(reference.get${column.relation.foreignColumn.javaName}());
      return this;
    }
#end
#end
    
    @Override
    public ${clsRowbuilder} clone()
    {
      ${clsRowbuilder} clone = new ${clsRowbuilder}(table);
#foreach( $column in $model.columns )
      clone.set${column.javaName}(get${column.javaName}());
#end
      return clone;
    }
  }
 
  /**
   * Delivers a collection of rows matching to a filter.
   * @param filter The used filter
   * @return The collection of rows, may return an empty list
   * @see ${jdSep}findWhere
   * @see ${jdSep}quietFindWhere
   * @see ${jdSep}getWhere
   */
  public ${rowcollection} find(Filter<${clsRowbuilder}> filter)
  {
    ${rowcollection} modifiers = new ${rowcollection}(this, false);
    for (${clsRowbuilder} row : rows)
    {
      if (filter.accept(row))
      {
        modifiers.add(row);
      }
    }
    return modifiers;
  }

  public void foreach(Action<${clsRowbuilder}> action)
  {
    // TODO iterator instead
    for (${clsRowbuilder} row : rows)
    {
      action.call(row);
    }
  }
  
  public List<${clsRowbuilder}> getRows()
  {
    return Collections.unmodifiableList(rows);
  }

  /**
   * Allows searching for one or more rows specified by a column value.
   * findWhere assumes that it is used to search for existing rows. An
   * exception will be thrown if no matching row was found. Use {@link
   * ${jdSep}quietFindWhere}, {@link ${jdSep} getWhere} or 
   * ${jdSep}find to avoid this behavior.
   * @see ${jdSep}getWhere
   * @see ${jdSep}quietFindWhere
   * @see ${jdSep}find(Filter)
   */
  public $findWhereClass findWhere = new $findWhereClass(this, true);

  /**
   * Allows searching for one or more rows specified by a column value.
   * quietFindWhere will not throw an exception if no row was found.
   * @see ${jdSep}getWhere
   * @see ${jdSep}findWhere
   * @see ${jdSep}find(Filter)
   */
  public $findWhereClass quietFindWhere = new $findWhereClass(this, false);

  public static class $findWhereClass
  {
    private final List<${clsRowbuilder}> rows;
    private final ${clsTable} table;
    private final boolean useNotEmptyAssertions;
    
    public $findWhereClass(${clsTable} theTable, boolean useNotEmptyAssertions)
    {
       table = theTable;
       rows = theTable.rows;
       this.useNotEmptyAssertions = useNotEmptyAssertions;
    }

    public $findWhereClass(${clsTable} theTable, List<${clsRowbuilder}> rows, boolean useNotEmptyAssertions)
    {
       table = theTable;
       this.rows = rows;
       this.useNotEmptyAssertions = useNotEmptyAssertions;
    }
    
    public ${rowcollection} rowComparesTo(Comparable<${clsRowbuilder}> toSearch) 
    {
      ${rowcollection} modifiers = new ${rowcollection}(table, useNotEmptyAssertions);
      for (${clsRowbuilder} row : rows) 
      {
        if (toSearch.compareTo(row) == 0) 
        {
          modifiers.add(row);
        }
      }
      assertModifiersNotEmpty(modifiers, "column values", toSearch);
      return modifiers;
    }
#foreach( $column in $model.columns )  

    public ${rowcollection} ${column.javaNameFirstLower}(${clsRef} ref)
    {
      ${clsRowbuilder} row = ref.getBuilder(table._dataSet);
      if (row == null)
      {
        DataSetIdentificator ds = DataSetRegistry.getCurrentDataSet(table.getDataset().getDataSetClassName());
        if (ds != null)
        {
          row = ref.getBuilder(ds);
        }
      }
      if (row == null)
      {
        throw new RuntimeException("Ref not defined in this scope");
      }
      return ${column.javaNameFirstLower}(row.get${column.javaName}());
    }
#if( $column.relation )
#set( $refTable = ${column.relation.foreignColumn.table} )

    public ${rowcollection} ${column.javaNameFirstLower}(${names.getRefClass($refTable)} ref)
    {
      ${model.package}.${names.getTableClass($refTable)}.${names.getRowBuilderClass($refTable)} row = ref.getBuilder(table._dataSet);
      if (row == null)
      {
        DataSetIdentificator ds = DataSetRegistry.getCurrentDataSet(table.getDataset().getDataSetClassName());
        if (ds != null)
        {
          row = ref.getBuilder(ds);
        }
      }
      if (row == null)
      {
        throw new RuntimeException("Ref not defined in this scope");
      }
      return ${column.javaNameFirstLower}(row.get${column.relation.foreignColumn.javaName}());
    }
#end       

    public ${rowcollection} ${column.javaNameFirstLower}(${column.javaType} toSearch) 
    {
      ${rowcollection} modifiers = new ${rowcollection}(table, useNotEmptyAssertions);
      for (${clsRowbuilder} row : rows) 
      {
        if (toSearch.equals(row.get${column.javaName}())) 
        {
          modifiers.add(row);
        }
      }
      assertModifiersNotEmpty(modifiers, "${column.name}", toSearch);
      return modifiers;
    }
#if( $column.javaType.contains("Long") )

    public ${rowcollection} ${column.javaNameFirstLower}(Integer toSearch) 
    {
      return ${column.javaNameFirstLower}( Long.valueOf(toSearch) );
    }
#end
#end

    private void assertModifiersNotEmpty(${rowcollection} modifiers, String columnName, Object toSearch)
    {
      if (useNotEmptyAssertions && modifiers.isEmpty()) 
      {
        throw new RuntimeException("No Row with " + columnName + " = " + toSearch);
      }
    }    
  }

  /**
   * Allows searching for a row specified by a column value.
   * The first matching row is returned. Does not throw an
   * exception, if no element is found.
   * @see ${jdSep}findWhere
   * @see ${jdSep}find(Filter)
   */
  public $getWhereClass getWhere = new $getWhereClass(this);

  public static class $getWhereClass
  {
    private final List<${clsRowbuilder}> rows;
    private final ${clsTable} table;
    
    public $getWhereClass(${clsTable} theTable) 
    {
       table = theTable;
       rows = theTable.rows;
    }
    
    public Optional<${clsRowbuilder}> rowComparesTo(Comparable<${clsRowbuilder}> toSearch) 
    {
      Optional<${clsRowbuilder}> result = Optional.<${clsRowbuilder}> absent();
      for (${clsRowbuilder} row : rows) 
      {
        if (toSearch.compareTo(row) == 0) 
        {
          if (result.isPresent()) {
            throw new RuntimeException("Multiple hits in getWhere query");
          }
          
          result = Optional.of(row);
        }
      }
      return result;
    }
#foreach( $column in $model.columns )  

    public Optional<${clsRowbuilder}> ${column.javaNameFirstLower}(${clsRef} ref)
    {
      ${clsRowbuilder} row = ref.getBuilder(table._dataSet);
      if (row == null)
      {
        DataSetIdentificator ds = DataSetRegistry.getCurrentDataSet(table.getDataset().getDataSetClassName());
        if (ds != null)
        {
          row = ref.getBuilder(ds);
        }
      }
      if (row == null)
      {
        throw new RuntimeException("Ref not defined in this scope");
      }
      return ${column.javaNameFirstLower}(row.get${column.javaName}());
    }
#if( $column.relation )
#set( $refTable = ${column.relation.foreignColumn.table} )

    public Optional<${clsRowbuilder}> ${column.javaNameFirstLower}(${names.getRefClass($refTable)} ref)
    {
      ${model.package}.${names.getTableClass($refTable)}.${names.getRowBuilderClass($refTable)} row = ref.getBuilder(table._dataSet);
      if (row == null)
      {
        DataSetIdentificator ds = DataSetRegistry.getCurrentDataSet(table.getDataset().getDataSetClassName());
        if (ds != null)
        {
          row = ref.getBuilder(ds);
        }
      }
      if (row == null)
      {
        throw new RuntimeException("Ref not defined in this scope");
      }
      return ${column.javaNameFirstLower}(row.get${column.relation.foreignColumn.javaName}());
    }
#end       

    public Optional<${clsRowbuilder}> ${column.javaNameFirstLower}(${column.javaType} toSearch) 
    {
      Optional<${clsRowbuilder}> result = Optional.<${clsRowbuilder}> absent();
      for (${clsRowbuilder} row : rows) 
      {
        if (toSearch.equals(row.get${column.javaName}())) 
        {
          if (result.isPresent()) {
            throw new RuntimeException("Multiple hits in getWhere for column ${column.name} = " + toSearch);
          }
          result = Optional.of(row);
        }      
      }
      return result;
    }
#if( $column.javaType.contains("Long") )
    
    public Optional<${clsRowbuilder}> ${column.javaNameFirstLower}(Integer toSearch) 
    {
      return ${column.javaNameFirstLower}( Long.valueOf(toSearch) );
    }
#end
#end
  }
  
  /** Inner class! Use ${rowcollection} in your code ! */
  public static class ${rowmodify} extends ${clsRowbuilder} 
  {
    
    List<${clsRowbuilder}> _rows;
    
    boolean _useNotEmptyAssertions;

    public ${rowmodify}(${clsTable} theTable, boolean useNotEmptyAssertions) 
    {
      super(theTable);
      _useNotEmptyAssertions = useNotEmptyAssertions;
      _rows = new ArrayList<${clsRowbuilder}>();
    }
      
    public void add(${clsRowbuilder} row) 
    {
      _rows.add(row);
    }
    
    public List<${clsRowbuilder}> getRows()
    {
      return Collections.unmodifiableList(_rows);
    }
      
    public boolean isEmpty() 
    {
      return _rows.isEmpty();
    }

    public ${rowmodify} delete()
    {
      for(${clsRowbuilder} row : _rows) 
      {
        table.rows.remove(row);
      }
      return this;
    }
#foreach( $column in $model.columns )
#if( $column.javaType.contains("Date") )

    public ${rowmodify} set${column.javaName}(String dateString)
    {
      for(${clsRowbuilder} row : _rows) 
      {
        row.set${column.javaName}(dateString);
      }
      return this;
    }
    
    public ${rowmodify} set${column.javaName}(DateBuilder date)
    {
      for(${clsRowbuilder} row : _rows) 
      {
        row.set${column.javaName}(date);
      }
      return this;
    }
#end
#if( $column.javaType.contains("Long") )
      
    public ${rowmodify} set${column.javaName}(Integer intValue)
    {
      for(${clsRowbuilder} row : _rows) 
      {
        row.set${column.javaName}(intValue);
      }
      return this;
    }
#end

    public ${rowmodify} set${column.javaName}(${column.javaType} value)
    {
      for(${clsRowbuilder} row : _rows) 
      {
        row.set${column.javaName}(value);
      }
      return this;
    }
      
    public ${rowmodify} set${column.javaName}Raw(Object value)
    {
      for(${clsRowbuilder} row : _rows)
      {
        row.set${column.javaName}Raw(value);
      }
      return this;
    }
    
#if( ${column.description} )
    /**
     * ${column.description}
     * <p>
     * Throws a RuntimeException, if row count is not equal to 1
     * @return The value
     */
#else
    // use description() in the table model to add a column description
#end
    public ${column.javaType} get${column.javaName}()
    {
      assertSingleResult(); 
      return _rows.get(0).get${column.javaName}();
    }
#end 

    /**
     * Gets the value of a specified column.
     * <p>
     * Throws a RuntimeException, if row count is not equal to 1.
     * @param column The column name (not case sensitive)
     * @return The value
     */
    public Object getValue(String column)
    {
      assertSingleResult();
      return _rows.get(0).getValue(column);
    }
    
    private void assertSingleResult()
    {
      if (_rows.size() != 1) 
      {
        throw new RuntimeException("There where multiple Row in the result! " + _rows.size());
      }
    }    
      
    /** 
     * Return the count of rows contained in this collection
     */
    public int getRowCount()
    {
      return _rows.size();
    }
      
    @Override
    public ${rowmodify} clone()
    {
      ${rowmodify} clone = new ${rowmodify}(table, _useNotEmptyAssertions);
      for(${clsRowbuilder} row:_rows) 
      {
        clone._rows.add(row.clone());
      }
      return clone;
    }

  }
  
  public static class ${rowcollection} extends ${rowmodify} 
  {
    
    public final $findWhereClass where;
    
    public ${rowcollection}(${clsTable} theTable, boolean useNotEmptyAssertions) 
    {
      super(theTable, useNotEmptyAssertions);
      where = new $findWhereClass(table, _rows, useNotEmptyAssertions);
    }
    
  }

  /**
   * Clears the table. Simply removes all rows from the table. Does not any magic. 
   */
  public void clear()
  {
    // TODO: Think about unbinding all Refs from the rows...
    rows.clear();
  }

  /**
   * Insert a new empty Row.
   * <code><pre>
   * ds.${names.getTableVariable($model)}.insertRow()
   *   .bind( ${jd.getSampleRef($model)} )
#foreach( $column in $model.columns )
   *   .set${column.javaName}( null )
#end
   *   ;
   * </pre></code>
   */
  public ${clsRowbuilder} insertRow()
  {
    ${clsRowbuilder} row = new ${clsRowbuilder}(this);
#foreach( $column in $model.columns )
#if( ${column.isAutoInvokeValueGeneration()} )
    row.autoInvokeNext${column.javaName}();
#end
#end
    rows.add(row);
    return row;
  }
#if( ${model.dataSet.isModelClassGeneration()} )

  /**
  * <code><pre>
  * ds.${names.getTableVariable($model)}.insertRow()
  * </pre></code>
  */
  public ${clsRowbuilder} insertRow(${model.javaName}Model rowToAdd)
  {
    ${clsRowbuilder} row = new ${clsRowbuilder}(this);
#foreach( $column in $model.columns )
    row.set${column.javaName}Raw( rowToAdd.get${column.javaName}Raw() );
#end
    rows.add(row);
    return row;
  }
#end

  /**
  * <code><pre>
  * ds.${names.getTableVariable($model)}.insertRow(data);
  * </pre></code>
  */
  public ${clsRowbuilder} insertRow(${clsRowbuilder} theRow)
  {
    rows.add(theRow);
    return theRow;
  }
  
  /**
  * <code><pre>
  * ds.${names.getTableVariable($model)}.insertRows(data);
  * </pre></code>
  */
  public void insertRows(${clsRowbuilder}...theRows)
  {
    rows.addAll(Arrays.asList(theRows));
  }
  
  /**
  * Insert new row at the given index
  * <code><pre>
  * ds.${names.getTableVariable($model)}.insertRowAt(3)
  *   ;
  * </pre></code>
  */
  public ${clsRowbuilder} insertRowAt(int index)
  {
    ${clsRowbuilder} row = new ${clsRowbuilder}(this);
    rows.add(index, row);
    return row;
  }
  
  /**
  * Insert new row Object at the given index
  * <code><pre>
  * ds.${names.getTableVariable($model)}.insertRowAt(3)
  * </pre></code>
  */
  public ${clsRowbuilder} insertRowAt(int index,${clsRowbuilder} theRow)
  {
    rows.add(index, theRow);
    return theRow;
  }
  
  /**
   * Remove a row from the builder by the given index.
   *
   * @return the deleted row
   */ 
  public ${clsRowbuilder} deleteRow(int index)
  {
    ${clsRowbuilder} rowBuilder = rows.get(index);
    rows.remove(rowBuilder);
    return rowBuilder;
  }

  /**
   * Remove a row from the data set
   */ 
  public ${clsRowbuilder} deleteRow($clsRef ref)
  {
    return deleteRow(ref.getBuilder(_dataSet));
  }

  /**
   * Remove a row from the data set
   */ 
  public ${clsRowbuilder} deleteRow(${clsRowbuilder} rowToDelete)
  {
    rows.remove(rowToDelete);
    return rowToDelete;
  }
#if( ${model.isAssociativeTable()})
#set( $col1 = ${model.associativeColumns.get(0)} )
#set( $col2 = ${model.associativeColumns.get(1)} )
#set( $tab1 = ${col1.relation.foreignColumn.table} )
#set( $tab2 = ${col2.relation.foreignColumn.table} )
#set( $ref1 = ${names.getRefVariable($tab1)} )
#set( $ref2 = ${names.getRefVariable($tab2)} )

  public ${clsRowbuilder} deleteAssociation(${names.getRefClass($tab1)} ${ref1}, ${names.getRefClass($tab2)} ${ref2})
  {
    for (${clsRowbuilder} row : rows) {
      if (row.get${col1.javaName}() == ${ref1}.get${col1.relation.foreignColumn.javaName}() &&
          row.get${col2.javaName}() == ${ref2}.get${col2.relation.foreignColumn.javaName}())
      {
        rows.remove(row);
        return row;
      }
    }
    
    throw new RuntimeException("No row found with specified IDs");
  }

  public ${clsRowbuilder} deleteAssociation(${names.getRefClass($tab2)} ${ref2}, ${names.getRefClass($tab1)} ${ref1})
  {
    return deleteAssociation(${ref1}, ${ref2});
  }

  public ${clsRowbuilder} deleteAllAssociations(${names.getRefClass($tab1)} ref)
  {
    for (${clsRowbuilder} row : rows) 
    {
      if (row.get${col1.javaName}() == ref.get${col1.relation.foreignColumn.javaName}())
      {
        rows.remove(row);
        return row;
      }
    }
    
    throw new RuntimeException("No row found with specified IDs");
  }

  public ${clsRowbuilder} deleteAllAssociations(${names.getRefClass($tab2)} ref)
  {
    for (${clsRowbuilder} row : rows)
    {
      if (row.get${col2.javaName}() == ref.get${col2.relation.foreignColumn.javaName}())
      {
        rows.remove(row);
        return row;
      }
    }
    
    throw new RuntimeException("No row found with specified IDs");
  }
#end

  /**
  * Creates a new row but does not add it to the table
  */
  public ${clsRowbuilder} newRow()
  {
    ${clsRowbuilder} row = new ${clsRowbuilder}(this);
    return row;
  }
  
  /**
  * Returns the next Object. The internal iterator is started at 
  * the first call.
  */
  public ${clsRowbuilder} next()
  {
    if(_iterator == null) 
    {
      _iterator = rows.iterator();
    }
    return _iterator.next();
  }
  
  public void resetIterator() 
  {
    _iterator = null;
  }

  public ITableMetaData getTableMetaData() 
  {
    return _metaData;
  }
  
  public int getRowCount() 
  {
    return rows.size();
  }
   
  /**
   * Gets the value of a specified table cell.
   * <p>
   * @param row The table row
   * @param column The column name (not case sensitive)
   * @return The value
   */
  public Object getValue(int row, String column) throws DataSetException 
  {
    if (row >= rows.size() || row < 0) 
    {
      throw new RowOutOfBoundsException();
    }
    return rows.get(row).getValue(column);
  }

  static Date toDate(String dateString)
  {
    return DateUtil.asDate(dateString);
  }
  
  static Date toDate(DateBuilder date)
  {
    if(date == null)
    {
      return null;
    }
    return date.asDate();
  }
#if( ${model.isAssociativeTable()})
#if (${model.dataColumns.size()} > 0)

  public static class RelationAttributes
  {

    private final $clsRowbuilder row;

    RelationAttributes($clsRowbuilder row)
    {
      this.row = row;
    }
#foreach( $column in $model.dataColumns )

    public RelationAttributes ${column.javaNameFirstLower}(${column.javaType} value)
    {
      row.set${column.javaName}(value);
      return this;
    }
#end

  }
#end
#end

}
