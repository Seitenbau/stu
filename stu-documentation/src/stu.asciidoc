= Simple Test Utils Users Documentation
SEITENBAU GmbH <stu@seitenbau.com>
v1.0, 2013-07-31
:imagesdir: images
'''

image::seitenbau-110px.png[SEITENBAU Logo]

== Overview
TODO general projekt description

== Common STU features
In this chapter common functionality of STU is described. The presented features are not related to
database testing only, but can be used for general test setup. 

=== TestConfiguration
To provide a unique configuration for tests for each developer, the +TestConfiguration+ class should be used.
With help of the +TestConfiguration+ you can store configuration values to a static or non-static class dependent
on the current environment.

==== Setting up TestConfigurations
An example for a static configuration:
[source,java]
----
public class TestConfig
{
  @StoredProperty(key = "fs.root")
  public static String FS_CONNECTION;
  static
  {
    TestConfiguration.load(TestConfig.class);
  }
}
----
In that case the variable +FS_CONNECTION+ is initialized with the property value for +fs.root+.

===== Determine the environemnt
Configurations are loaded via the directory +src/test/resources/tets/*+ in the order logged to the console:

* +default-test.properties+
* +<your-username>.properties+
* +<your-compuername>.properties+

The data is loaded in the order stated above. Later loaded data replaces already loaded data.
The notation +${varname}+ can be used to keep parts of values exchangeable.

In addition a specific environment can be determined by setting the environment variable +SB_CONFIG_TARGET+.
In that case the default-properties and afterwards the specific configuration is loaded.

==== Special variables
Here are some special variables that are initialized by default:
[cols="2", options="header"]
|===
|Variable
|Description

|+_host.ip+
|Ip of the computer.

|+_host.name+
|Host name of the computer.

|+_host.dns+
|DNS name of the computer.

|+_username+
|The name of the current user. Works with Windows and Ubuntu/Debian.

|+_host.ipV4+
|IP v4 address of the computer.

|+_host.ipV6+
|IP v6 address of the computer.
|===

==== Special configuration preferences
[cols="2", options="header"]
|===
|Key
|Description

|+_debug+
|Determines if the loaded configuration properties are logged to the console.

|+_debug.loglevel+
|Loglevel of the +TestLogger+ of STU. Allowed levels are: +TRACE+, +DEBUG+, +INFO+, +WARN+, +ERROR+ and +FATAL+.
|===

==== Examples for supported notations
The +TestConfiguration+ supports the following data types:

* +Boolean+
* +Enum+
* +Integer+
* +Map+
* +String+

[source,java]
----
public class TestConfig
{
  @StoredProperty(key="a-default-value")
  public static String STRING_VALUE;
   
  @StoredProperty(key="aNumber")
  public static Integer NUMBER;
   
  @StoredProperty(key="aMap")
  public static Map<String, String> MAP;
   
  public enum State {START,STOP}
   
  @StoredProperty(key="anEnum")
  public static State STATUS;
   
  static
  {
    TestConfiguration.load(TestConfig.class);
  }
}
----

The corresponding properties file format:

[source,text]
----
# Variable that is replaced with assigned value, but not referenced in TestConfig.
var=someValue
 
# A String. The second var expression is escaped and therefore not replaced. 
a-default-value= The default ${var} \\${var}
 
# A number. Read as Integer if specified in corresponding TestConfig class.
aNumber=42
 
# A Map<String,String>
aMap[Martin]= ${var}: Fowler
aMap[Max]= ${var}: Power \\${var}
 
# A mapped ENUM
anEnum=START
----

=== STU Annotations for Tests
The STU project provides annotations that makes the maintenance of tests easier and offers
the possibility to determine the execution of (single) tests by annotations, dependent on configuration
values. 

==== Basic concepts
If tests failing, the cause should be annotated directly at the failing test. Therefore the annotation
+@TestIssue+ is provided. A String can be passed as parameter to the annotation. The annotation supports
the minimalistic +TicketDSL+. The annotation is recorded by the Test-State recorder by default.
In addition a similar concept is provided as +RequirementDSL+. The purpose for the requirments annotation is
to disable tests in a specific environment. 

==== +TickeDSL+

Extended Backus-Naur Form of the +TicketDSL+
[cols="2", options="header"]
|===
|Token
|EBNF

|+TickeDSL+
|[+CONDITION+] +TICKET_ID+

|+CONDITION+
|+STATE+ ":"

|+STATE+
|"open" {brvbar} "fixed" {brvbar} "ignored"

|+TICKET_ID+
|RegEx = [A-Za-z0-9_-]*
|===

Supported states are:

* +open+ : The ticket is new or in process. The test is exected to fail.
* +fixed+ : The ticket is closed. The test is expected to success.
* +ignored+ : The related ticket is referenced. The expected behavior is the same as +fixed+. 

[cols="2", options="header"]
|===
|Example
|Description

|"STUTESTING-123"
|open ticket (default, no +STATE+ provided)

|"open:STUTESTING-123"
|open ticket

|"fixed:STUTESTING-123"
|closed ticket
|===

==== Example use of +TicketDSL+

To make it easy to find Tickets inside an IDE, it is recommended to define all ticket ids as constants inside
an interface.

[source,java]
----
public interface ProjectTickets {
  /** SampleService Impl, Call of service method returns null */
  String SBTESTING_123 = "SBTESTING-123";
}
----

Inside a test only the constants should be referenced.

[source,java]
----
@Test
@TestIssue(ProjectTickets.SBTESTING_123)
public void test_0101_ValidCall() throws Throwable {
    ...
}
----

==== +RequirementDSL+

Extended Backus-Naur Form of the +RequirementDSL+
[cols="2", options="header"]
|===
|Token
|EBNF

|+RequirementDSL+
|[+CONDITION+] +REQUIRMENT+

|+CONDITION+
|+STATE+ ":"

|+STATE+
|"impl" {brvbar} "notimpl" {brvbar} "implemented" {brvbar} "notimplemented" {brvbar} "custom"

|+REQUIREMENT+
|any non whitespace characters
|===

Supported states are:

* +impl/implemented+ : The requirement is implemented. The test shpuld be executed.
* +notimpl/notimplemented+ : The requirement is not implemented yet. The test should not be executed.
* +custom+ : Marked as first-hand +FeatureDetector+. See +FeatureDetector+ explanation.

[cols="2", options="header"]
|===
|Example
|Description

|"MYSQL_DB_3"
|Feature MYSQL_DB is not implemented yet (default, if no +STATE+ provided).

|"notimpl:MYSQL_DB_3"
|Feature MYSQL_DB_3 is not implemented yet.

|"impl:MYSQL_DB_3"
|Feature MYSQL_DB_3 is implemented.

|"custom:com.seitenbau.stu.dsl.requirement.RequirementDslTest.ActiveDetector"
|The +FeatureDetector+ is used to determine if the feature is active.
|===

==== Example for a +FeatureDetector+
The +TestPropertyIs+ +FeatureDetector+ validates if a given test configuration value is set:

[source,text]
----
custom:com.seitenbau.stu.dsl.requirement.TestPropertyIs:key=rainer
--> Verifies that the TestConfiguration value for parameter "key" equals "rainer"

custom:com.seitenbau.stu.dsl.requirement.TestPropertyIs:!key=rainer
--> Verifies that the TestConfiguration value for parameter "key" is not equal to "rainer"
----

==== Example use of +RequirmentDSL+

The +@Requires+ annotation can be used to check if a +TestConfig+ value is set for example.
Only if the particular value is set, the test is executed.

[source,java]
----
@RunWith(SBTestRunner.class)
public class RequiresTest
{
   
  @Rule
  public RequiresRule req = new RequiresRule();
   
  @Test
  @Requires(TestRequirement.SOLAR)
  public void sonar() throws Exception
  {
    fail("Requires sonar server");
  }
   
}
 
public class TestRequirement
{
  public static final String SOLAR = "custom:com.seitenbau.stu.dsl.requirement.TestPropertyIs:testinstance.solar.available=true";
}
----

A corresponding +TestConfig+ class :

[source,java]
@StoredProperty(key = "testinstance.solar.available", defaultValue="false")
public static boolean requiresSolar;
----

=== JUnitRules

== Testing databases 
Here comes information for the database classes. 

=== Modeling of databases

=== Migration of generated DataSets

=== Connecting to a (Test-)Database

=== Verify Database state

== Example implementation
Here comes information about the example implementation.



=== 

[role="lead"]
This text will be styled as a lead paragraph (i.e., larger font).

In AsciiDoc, the main structural element is the paragraph.
A paragraph consists of adjacent lines of text.

To start a new paragraph, leave a blank line by hitting
Enter twice, then just keep on typing.

Roses are red, +
Violets are blue.

I can't believe it, we *won*!

_italic phrase_ (or 'italic phrase')

__i__talic le__tt__ers

*bold phrase*

**b**old le**tt**ers

*_bold italic phrase_*

**__b__**old italic le**__tt__**ers

+monospace phrase+ and le++tt++ers

+_monospace italic phrase_+ and le++__tt__++ers

+*monospace bold phrase*+ and le++**tt**++ers

+*_monospace bold italic phrase_*+ and le++**__tt__**++ers

`inline literal passthrough` (monospace text without substitutions)

[small]#phrase styled by CSS class .small#

[big]##O##nce upon a time...

`single smart quotes'

``double smart quotes''

* Milk
* Eggs
* Bread
* Bananas

- Milk
- Eggs
- Bread
- Bananas

* Diary
** Milk
** Eggs
* Bakery
** Bread
* Produce
** Bananas

* Kingdom
** Phylum
*** Class
**** Order
***** Family

. Protons
. Electrons
. Neutrons

. Lists
.. Outline
... Unordered
... Ordered
.. Labeled
. Titles
.. Document
.. Section
.. Block

NOTE: Note it is...

TIP: Pro tip...

IMPORTANT: Don't forget...

WARNING: Watch out for...

CAUTION: Ensure that...

first term:: definition of first term
section term:: definition of second term

[qanda]
What is Asciidoctor?::
  An implementation of the AsciiDoc processor in Ruby.
What is the answer to the Ultimate Question?:: 42

* Every list item has at least one paragraph of content,
  which may be wrapped, even using a hanging indent.
+
Additional paragraphs or blocks are adjoined by putting
a list continuation on a line adjacent to both blocks.
+
list continuation:: a plus sign (+) on a line by itself

* A literal paragraph does not require a list continuation.

 $ gem install asciidoctor

* AsciiDoc lists may contain any complex content.
+
[cols="2", options="header"]
|===
|Application
|Language

|AsciiDoc
|Python

|Asciidoctor
|Ruby
|===

http://asciidoc.org - automatic!

http://asciidoc.org[AsciiDoc]

https://github.com/asciidoctor[Asciidoctor @ *GitHub*]

See <<paragraphs>> to learn how to write paragraphs.

Learn how to organize the document into <<section-titles,sections>>.

Reference code like +types+ or `methods` inline.

 Indent one space to insert a one-liner.
 

[source,groovy]
.SpockDataSetSpec.groovy
----
@Unroll
@DatabaseSetup(prepare = DemoGroovyDataSet)
def "find person by name = '#name'"() {
    when:
        def person = sut.findPersonByName(name)
    then:
        person.id        == personTableRow.id
        person.name      == personTableRow.name
        person.firstName == personTableRow.firstName
    where:
        name         | personTableRow
        "Kaulbersch" | KAULBERSCH
        "Guitton"    | GUITTON
        "Baranowski" | BARANOWSKI
}
----

[source,java]
----
@Test
@DatabaseSetup(prepare = ExtendedDemoGroovyDataSet.class)
public void unmodifiedExtendedDataset() throws Exception
{
  dbTester.assertDataBaseSorted(dataSet, sortConfig);
}
----

.Optional Title
****
*Sidebar* Block

Use: sidebar notes :)
****

.Optional Title
==========================
*Example* Block

Use: examples :)

Default caption "Example:"
can be changed using

 [caption="Custom: "]

before example block.
==========================

.Optional Title
[NOTE]
===============================
*NOTE* Block

Use: multi-paragraph notes.
===============================

[cols="1,1,2" options="header"]
.Applications
|===
|Name
|Category
|Description

|Firefox
|Browser
|Mozilla Firefox is an open-source web browser.
It's designed for standards compliance,
performance, portability.

|Arquillian
|Testing
|An innovative and highly extensible testing platform.
Empowers developers to easily create real, automated tests.
|===