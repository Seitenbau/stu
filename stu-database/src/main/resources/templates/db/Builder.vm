#set($names           = ${model.names})
#set($filename        = ${names.builderClass})
#set($package         = ${model.package} )
#set($clsBuilder      = ${names.builderClass})
#set($clsDataSet      = ${names.dataSetClass})
#set($jd              = ${model.javaDocBuilder})
#set($jdSep           = "#")
#set($referenceMethod = "ref")
#parse("templates/db/include_javadoc.vm")
#if( $package && $package.length() != 0 )
package ${package};
#end

import com.seitenbau.stu.database.extend.DbUnitDatasetFactory;
import com.seitenbau.stu.database.dsl.DataSetIdentificator;
import com.seitenbau.stu.database.dsl.DataSetRegistry;
import org.dbunit.dataset.IDataSet;

#if( $model.package && $model.package.length() != 0 )
import ${model.package}.${clsDataSet};
#end
#foreach( $table in $model.tables )
import ${model.package}.${names.getRefClass($table)};
import ${model.package}.${names.getTableClass($table)}.${names.getRowBuilderClass($table)};
#end

import groovy.lang.Closure;

import java.util.List;

/**
 * {@link DbUnitDatasetFactory} factory to create in-memory
 * {@link IDataSet} for your Database. 
 * Represents a ${model.name} dataset. Provides both a Groovy table based API and
 * a plain Java builder API to model the test data.
 * <p>
 * To define test data, overwrite the method {@link ${jdSep}tables()} or
 * dynamically call the row() methods on the table adapters.
 * <p>
 * The model contains the following tables:
 * <ul>
#foreach( $table in $model.tables )
 *   <li>
 *     {@link ${names.getTableClass($table)}} - ${table.description}<br>
 *     For Groovy language features, see: {@link ${names.getTableAdapterClass($table)}}
 *   </li>
#end
 * </ul>
 *
 * <p>
 * This class is generated by ${model.caller}
 */
public class ${clsBuilder} implements DataSetIdentificator, DbUnitDatasetFactory
{

  private final ${clsDataSet} dataset;

#foreach( $table in $model.tables )
#javadoc_table_adapter($table)
  public final ${table.javaName}TableAdapter ${table.javaNameFirstLower}Table;
  
  // Getter for Groovy property access
  protected ${table.javaName}TableAdapter get${table.javaName}Table()
  {
    return ${table.javaNameFirstLower}Table;
  }
#end

  private static ThreadLocal<${clsBuilder}> activeParents = new ThreadLocal<${clsBuilder}>();

  private static void unsetActiveParent()
  {
    activeParents.remove();
  }

  private static boolean trySetActiveParent(${clsBuilder} instance)
  {
    // there is a thread local active parent, so do not allow to overwrite it
    if (activeParents.get() != null) {
      return false;
    }
    
    activeParents.set(instance);
    return true;
  }

  private static ${clsBuilder} getWorkingInstance(${clsBuilder} current)
  {
    if (activeParents.get() != null)
    {
      return activeParents.get();
    }
    
    return current;
  }

  public ${clsBuilder}() {
    this(new ${clsDataSet}() 
    {
      @Override
      public void initDataSet() { }
    });
  }
  
  public ${clsBuilder}($clsDataSet dataset)
  {
    ${clsBuilder} instance = getWorkingInstance(null);
    if (getWorkingInstance(null) == null) {
      // no other parent active, create tables
      this.dataset = dataset;
#foreach( $table in $model.tables )
      ${names.getTableAdapterVariable($table)} = new ${names.getTableAdapterClass($table)}(this, dataset.${names.getTableVariable($table)});
#end
    } else {
      // use parent's tables
      this.dataset = instance.dataset;
#foreach( $table in $model.tables )
      ${names.getTableAdapterVariable($table)} = instance.${names.getTableAdapterVariable($table)};
#end
    }

    buildDataSet(getWorkingInstance(this));
  }
  
  private void buildDataSet(${clsBuilder} instance)
  {
    DataSetIdentificator lastDataSet = DataSetRegistry.use(instance);
    handleExtensions();
    tables();
    relations();
    DataSetRegistry.use(lastDataSet);
  }
  
  private void handleExtensions()
  {
    handleExtendsDataSet(extendsDataSet());
    if (extendsDataSets() != null) {
      List<?> dataSets = (List<?>)extendsDataSets();
      for (Object dataSet : dataSets)
      {
        handleExtendsDataSet(dataSet);
      }
    }
  }
  
  private void handleExtendsDataSet(Object dataSet)
  {
    if (dataSet == null)
    {
      return;
    }
    if (!(dataSet instanceof java.lang.Class))
    {
      throw new RuntimeException("Wrong type");
    }
    
    Class<?> clazz = (Class<?>)dataSet;
    if (!(hasSuperClass(clazz, ${clsBuilder}.class)))
    {
      throw new RuntimeException("Wrong type");
    }

    try
    {
      boolean hasSet = trySetActiveParent(this);
      clazz.newInstance();
      if (hasSet) {
        unsetActiveParent();
      }
    }
    catch (Exception e)
    {
      throw new RuntimeException("Error extending builder", e);
    }
  }

  private boolean hasSuperClass(Class<?> clazz, Class<?> superClass)
  {
    Class<?> c = clazz;
    while (c != null)
    {
      if (superClass.equals(c)) 
      {
        return true;
      }
      c = c.getSuperclass();
    }
    return false;
  }

  /**
   * Override this method to define the tables of the dataset.
   * <p>Example usage:
   * <pre>
   * def tables() {
#foreach( $table in $model.tables )
${jd.createTableExample($table, "   ", "  ")}
#end
   * }
   * </pre>
   *
   * @return Anything. The method returns an object to allow Groovy's def syntax.
   */
  protected Object tables()
  {
    return null;
  }

  /**
   * Override this method to define relations in the dataset.
   * <p>Example usage:
   * <pre>
   * def relations() {
${jd.createRelationExamples($model, "   ", "  ")}
   * }
   * </pre>
   *
   * @return Anything. The method returns an object to allow Groovy's def syntax.
   */
  protected Object relations()
  {
    return null;
  }

  /**
   * Override this method to specify a base DataSets, which the current DataSet will extend
   * <p>Example usage (Groovy):
   * <pre>
   * def extendsDataSet() { BaseDataSet }
   * </pre>
   * <p>Example usage (Java):
   * <pre>
   * Object extendsDataSets() {
   *   return baseDataSet.class;
   * }
   * </pre>
   *
   * @return The base data set class
   */
  protected Object extendsDataSet() 
  {
    return null;
  }

  /**
   * Override this method to specify DataSets, from which the current DataSet is composed.
   * <p>Example usage (Groovy):
   * <pre>
   * def extendsDataSets() { [ Base1DataSet, Base2DataSet ] }
   * </pre>
   * <p>Example usage (Java):
   * <pre>
   * Object extendsDataSets() {
   *   List&lt;Class&lt;?&gt;&gt; baseDataSets = new ArrayList&lt;Class&lt;?&gt;&gt;();
   *   baseDataSets.add(Base1DataSet.class);
   *   baseDataSets.add(Base2DataSet.class);
   *   return baseDataSets;
   * }
   * </pre>
   *
   * @return List of base data set classes
   */
  protected Object extendsDataSets() 
  {
    return null;
  }

  /**
   * Parses and integrates the tables to the data set
   * <p>Example usage:
   * <pre>
   * tables {
#foreach( $table in $model.tables )
${jd.createTableExample($table, "   ", "  ")}
#end
   * }
   * </pre>
   * </ul>
   *  
   * @param table Table data as a Groovy closure
   */
  public void tables(Closure<?> table)
  {
    tables(getWorkingInstance(this), table);
  }

  private void tables(${clsBuilder} dataSet, Closure<?> table)
  {
    DataSetIdentificator lastDataSet = DataSetRegistry.use(dataSet);
    table.setDelegate(dataSet);
    table.setResolveStrategy(Closure.DELEGATE_FIRST);
    table.call();
    DataSetRegistry.use(lastDataSet);
  }

  /**
   * Parses the defined relations and integrates them into the data set
   * <p>Example usage:
   * <pre>
   * relations {
${jd.createRelationExamples($model, "   ", "  ")}
   * }
   * </pre>
   * @param relations The relations data
   */
  public void relations(Closure<?> relations)
  {
    this.relations(getWorkingInstance(this), relations);
  }

  private void relations(${clsBuilder} dataSet, Closure<?> relations)
  {
    DataSetIdentificator lastDataSet = DataSetRegistry.use(dataSet);
    relations.call();
    DataSetRegistry.use(lastDataSet);
  }

#foreach( $table in $model.tables )
#set($clsRef = ${table.javaName} + "Ref")
#set($clsRefAccess = ${table.javaName} + "RefAccess")
#set($varTable = ${table.javaNameFirstLower} + "Table")

  /**
   * Allows ${table.javaName} table data access using references
   * @param ref The reference which represents tha data
   * @return The accessor object 
   */
  public RowBuilder_${table.javaName} ${referenceMethod}(${clsRef} ref)
  {
    return ref.getBuilder(this);
  }
#end

  @Override
  public String getDataSetClassName()
  {
    return dataset.getDataSetClassName();
  }
  
  @Override
  public Object getDataSet()
  {
    return dataset.getDataSet();
  } 

  /**
   * Create a DBUnit dataset.
   * @return The Dbunit dataset
   */
  @Override
  public IDataSet createDBUnitDataSet() 
  {
    return dataset.createDBUnitDataSet();
  }

}