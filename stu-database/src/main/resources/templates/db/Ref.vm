#set($names             = ${model.dataSet.names})
#set($filename          = ${model.javaName} + "Ref")
#set($package           = ${model.package})
#set($clsDataSet        = ${model.dataSet.name} + "DataSet")
#set($clsRef            = ${model.javaName} + "Ref")
#set($clsTable          = ${names.getTableClass($model)})
#set($clsRowbuilder     = ${names.getRowBuilderClass($model)})
#set($jdSep             = "#")
#set($privateListPrefix = "private_")
#if( $package && $package.length() != 0 )
package ${package};
#end

import com.seitenbau.stu.database.dsl.DataSetIdentificator;
import com.seitenbau.stu.database.dsl.DataSetRegistry;

import java.util.HashMap;
import java.util.Map;
import com.seitenbau.stu.database.dsl.DatabaseRef;

import ${model.package}.${clsTable}.${clsRowbuilder};


/**
 * Reference ("Ref") to a ${model.javaName} table row. Once bound to a table 
 * {@link ${clsTable}${jdSep}${clsRowbuilder}}, the Ref can be used instead
 * of the concrete rowbuilder. To create a Ref, use the {@link RefFactory}.
 * <p>
 * Available fields:
 * <ul>
#foreach ($col in $model.columns)
 *   <li>{@link ${jdSep}get${col.javaName}()} - ${col.javaType}
#if( ${col.description} )
   *    <br>${col.description}
#end
 *   </li>
#end
 * </ul>
 * <p>
 * Available relations:
 * <ul>
#foreach( $col in ${model.foreignColumns} )
 *   <li>{@link ${jdSep}${col.relation.localName}(${names.getRefClass($col.relation.foreignColumn.table)})}</li>
#end
#foreach( $foreignCol in ${model.referencingColumns} )
 *   <li>{@link ${jdSep}${foreignCol.relation.foreignName}(${names.getRefClass(${foreignCol.table})} ... )}</li>
#end
#foreach ( $rel in ${model.associativeRelations} )
 *   <li>{@link ${jdSep}${rel.localName}(${names.getRefClass(${rel.foreignAssociationColumn.table})} ... )}</li>
#end
 * </ul>
 */
public class ${clsRef} extends DatabaseRef
{

  private final Map<${clsDataSet}, ${clsRowbuilder}> builders;
  
  public ${clsRef}()
  {
    builders = new HashMap<${clsDataSet}, ${clsRowbuilder}>();
  }
#foreach ($col in $model.columns)

#if( ${col.description} )
  /**
   * ${col.description}
   * @return The value
   */
#else
  // use description() in the table model to add a column description
#end
  public ${col.javaType} get${col.javaName}()
  {
    return getCurrentBuilder().get${col.javaName}();
  } 
#end

  /**
   * Allows to access the bound row builder depending on the active DataSet
   * @return The Rowbuilder in the current DataSet
   */
  public ${clsRowbuilder} getCurrentBuilder()
  {
    ${clsRowbuilder} row = builders.get(getActiveDataSet());
    if (row == null)
    {
      throw new IllegalStateException("No corresponding row builder found in ${clsRef}");
    }
    return row;
  }

  /**
   * Removes the Ref from the DataSet. Will delete the bound row and remove all n:m associations.
   * Afterwards, the Ref will no longer be bound to that row.
   * <p>
   * Note: The DataSet may be in an invalid state, because 1:n or 1:1 associations will not be updated.
   */
  public void removeFromDataSet()
  {
    ${clsDataSet} dataSet = getActiveDataSet();
    
    ${clsRowbuilder} rowbuilder = getBuilder(dataSet);
    if (rowbuilder == null)
    {
      // Nothing to delete...
      return;
    }

    dataSet.${names.getTableVariable($model)}.deleteRow(rowbuilder);

#foreach( $col in $model.columns )
#foreach( $refCol in $col.referencedByList )
#if( ${refCol.table.isAssociativeTable()} ) 
    dataSet.${names.getTableVariable($refCol.table)}.deleteAllAssociations(this);
#else
    if (dataSet.${names.getTableVariable($refCol.table)}.getWhere.${refCol.javaNameFirstLower}(this).isPresent())
    {
      dataSet.${names.getTableVariable($refCol.table)}.findWhere.${refCol.javaNameFirstLower}(this).set${refCol.javaName}Raw(null);
    }
#end
#end
#end

    // unbind the Ref
    builders.remove(dataSet.getDataSet());
  }

  void setBuilder(DataSetIdentificator identificator, ${clsRowbuilder} builder)
  {
    if (!(identificator.getDataSet() instanceof ${clsDataSet}))
    {
      throw new RuntimeException("Cannot bind ${clsRef} to " + identificator.getDataSet().getClass().getName());
    }
    
    ${clsDataSet} dataSet = (${clsDataSet})(identificator.getDataSet());
  
    ${clsRowbuilder} lastBuilder = builders.put(dataSet, builder);
    if (lastBuilder != null && lastBuilder != builder)
    {
      throw new RuntimeException("Builder cannot be redefined");
    }
#foreach( $col in ${model.foreignColumns} )
#set( $map = ${privateListPrefix} + ${col.relation.localName} + "Map" )
#set( $refVar = ${names.getRefVariable(${col.relation.foreignColumn.table})} + "_" + ${col.relation.localName} )

    ${names.getRefClass(${col.relation.foreignColumn.table})} ${refVar} = ${map}.get(dataSet);
    if (${refVar} != null)
    {
      builder.set${col.javaName}(${refVar});
    }
#end
  }

  ${clsRowbuilder} getBuilder(DataSetIdentificator identificator)
  {
    return builders.get(identificator.getDataSet());
  }
#foreach( $col in ${model.foreignColumns} )
#set( $map = ${privateListPrefix} + ${col.relation.localName} + "Map" )

  // Cache for unresolvable relations
  private Map<${clsDataSet}, ${names.getRefClass(${col.relation.foreignColumn.table})}> ${map} = new HashMap<${clsDataSet}, ${names.getRefClass(${col.relation.foreignColumn.table})}>();

  /**
#if( ${col.relation.localDescription.length()} > 0 )
   * ${col.relation.localDescription}
   * <p>
#end
   * Models: This entity (and maybe others) is related to the given entity ref.
   * @param ref The reference to the entity, to which the current entity is related to
   * @return The reference to the current entity
   */
  public ${clsRef} ${col.relation.localName}(${names.getRefClass(${col.relation.foreignColumn.table})} ref)
  {
    ${clsDataSet} dataSet = getActiveDataSet();
    ${clsRowbuilder} builder = getBuilder(dataSet);

    if (builder != null) {
      builder.set${col.javaName}(ref);
    } else {
      ${map}.put(dataSet, ref);
    }
    return this;
  }
#end
#foreach( $foreignCol in ${model.referencingColumns} )

  /**
#if( ${foreignCol.relation.foreignDescription.length()} > 0 )
   * ${foreignCol.relation.foreignDescription}
   * <p>
#end
   * Models: This entity is related to the given entity refs.
   * @param refs A list of references, which are related to the current entity
   * @return The reference to the current entity
   */
  public ${clsRef} ${foreignCol.relation.foreignName}(${names.getRefClass(${foreignCol.table})} ... refs)
  {
    for (${names.getRefClass(${foreignCol.table})} ref : refs)
    {
      ref.${foreignCol.relation.localName}(this);
    }
    return this;
  }
#end
#foreach ( $rel in ${model.associativeRelations} )
#set( $foreignTable = ${names.getTableVariable(${rel.foreignColumn.table})} )

  /**
#if( ${rel.description} && ${rel.description.length()} > 0 )
   * ${rel.description}
   * <p>
#end
   * Models: A n:m relationship between both tables.
#if (${rel.localAssociationColumn.table.dataColumns.size()} > 0)
#set( $clsRelAttr = ${names.getTableClass(${rel.localAssociationColumn.table})} + ".RelationAttributes" )
   * @param ref A the reference, which is related to the current entity
   * @return A builder to set attributes on the relation
   */
  // RelationAttributes
  public ${clsRelAttr} ${rel.localName}(${names.getRefClass(${rel.foreignAssociationColumn.table})} ref)
  {
    ${clsDataSet} dataSet = getActiveDataSet();

    ${package}.${names.getTableClass(${rel.localAssociationColumn.table})}.${names.getRowBuilderClass(${rel.foreignColumn.table})} builder = dataSet.${foreignTable}.insertRow();
    builder.set${rel.localAssociationColumn.javaName}(this);
    builder.set${rel.foreignColumn.javaName}(ref);

    return new ${clsRelAttr}(builder);
  }
#else
   * @param refs A list of references, which are related to the current entity
   * @return The reference to the current entity
   */
  public ${clsRef} ${rel.localName}(${names.getRefClass(${rel.foreignAssociationColumn.table})} ... refs)
  {
    ${clsDataSet} dataSet = getActiveDataSet();

    for (${names.getRefClass(${rel.foreignAssociationColumn.table})} ref : refs)
    {
      ${package}.${names.getTableClass(${rel.localAssociationColumn.table})}.${names.getRowBuilderClass(${rel.foreignColumn.table})} builder = dataSet.${foreignTable}.insertRow();
      builder.set${rel.localAssociationColumn.javaName}(this);
      builder.set${rel.foreignColumn.javaName}(ref);
    }
    return this;
  }
#end
#end

  private ${clsDataSet} getActiveDataSet() 
  {
    DataSetIdentificator identificator = DataSetRegistry.getCurrentDataSet("${model.package}.${model.dataSet.name}");
    if (identificator == null)
    {
      throw new IllegalStateException("No active context set in ${names.getRefClass($model)}");
    }
    return (${clsDataSet})identificator.getDataSet();
  }

}